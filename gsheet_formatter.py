import gspread
import json
import os
import pickle # For storing API credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
import traceback # Added for more detailed error logging

print("gsheet_formatter.py starting (simplified version)...", flush=True)

# --- Configuration ---
# Edit this section
SPREADSHEET_NAME = 'CSE-03_B_ClassRoutine'
TARGET_SHEET_NAME = 'backend'
APP_SCRIPT_ID = 'AKfycbxEHGHqGrOQkLOpyikkjGLZ1cf-g0YfUW1dXmqWX6PUOoFxEPIr7FoeQ8e74-euTg'


# Don't touch
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# Path to the JSON file generated by the scraper script
SCRAPED_DATA_JSON_PATH = os.path.join(BASE_DIR, "output_of_fetched_routine", "final_combined_routine.json")

# --- Apps Script API Configuration ---
# IMPORTANT: Replace with the SCRIPT ID you got after deploying 'triggerSortFromPython' as an Executable API
# Path to the OAuth 2.0 client ID JSON file downloaded from Google Cloud Console
# GOOGLE_SERVICE_ACCOUNT_KEY_FILE = 'google_cloud_keys/service_account_key.json' 
# GOOGLE_OAUTH_CLIENT_SECRET_FILE = 'google_cloud_keys/oauth_client_secret.json' 
GOOGLE_KEYS_DIR = 'google_cloud_keys'
GOOGLE_SERVICE_ACCOUNT_KEY_FILE = os.path.join(GOOGLE_KEYS_DIR, 'service_account_key.json')
GOOGLE_OAUTH_CLIENT_SECRET_FILE = os.path.join(GOOGLE_KEYS_DIR, 'oauth_client_secret.json')

# Scope for Apps Script API
APP_SCRIPT_SCOPES = ['https://www.googleapis.com/auth/script.projects', 'https://www.googleapis.com/auth/script.external_request', 'https://www.googleapis.com/auth/spreadsheets'] # Added spreadsheets scope for safety
# Token file to store user's credentials after first auth
TOKEN_PICKLE_FILE = 'token.pickle'


# --- Helper Functions ---
def load_routine_data(json_file_path):
    """Loads the final routine data from the JSON file."""
    print(f"Attempting to load routine data from: {json_file_path}", flush=True)
    try:
        with open(json_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"Successfully loaded {len(data)} routine entries from {json_file_path}.", flush=True)
        return data
    except FileNotFoundError:
        print(f"Error: Routine data file '{json_file_path}' not found. "
              "Ensure the scraper script ran successfully and produced 'Formatted Output/final_routine_output.json'.", flush=True)
        return []
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{json_file_path}'.", flush=True)
        return []
    except Exception as e:
        print(f"An unexpected error occurred in load_routine_data: {e}", flush=True)
        return []

def authenticate_gsheet(service_account_json_path):
    """Authenticates with Google Sheets API using service account credentials."""
    print(f"Attempting to authenticate with Google Sheets using: {service_account_json_path}", flush=True)
    try:
        if not os.path.isabs(service_account_json_path):
            script_dir = os.path.dirname(os.path.abspath(__file__))
            service_account_json_path = os.path.join(script_dir, service_account_json_path)

        if not os.path.exists(service_account_json_path):
            print(f"ERROR: Service account file '{service_account_json_path}' not found. "
                  "Please download it from Google Cloud Console and place it correctly.", flush=True)
            return None
            
        gc = gspread.service_account(filename=service_account_json_path)
        print("Google Sheets authentication successful.", flush=True)
        return gc
    except Exception as e:
        print(f"An error occurred during Google Sheets authentication: {e}", flush=True)
        print("Ensure the service account file is valid and has the necessary permissions on the spreadsheet.", flush=True)
        return None

def get_or_create_worksheet(spreadsheet, sheet_name, rows="100", cols="20"):
    """Gets a worksheet by name, or creates it if it doesn't exist."""
    try:
        worksheet = spreadsheet.worksheet(sheet_name)
        print(f"Found existing worksheet: '{sheet_name}'", flush=True)
    except gspread.exceptions.WorksheetNotFound:
        print(f"Worksheet '{sheet_name}' not found. Creating it...", flush=True)
        worksheet = spreadsheet.add_worksheet(title=sheet_name, rows=rows, cols=cols)
        print(f"Created new worksheet: '{sheet_name}'", flush=True)
    except Exception as e:
        print(f"An error occurred while trying to get or create worksheet '{sheet_name}': {e}", flush=True)
        return None
    return worksheet

def write_data_to_sheet(worksheet, data_to_write):
    """Writes the raw routine data to the provided worksheet, with specified column order and combined Teacher Contact."""
    if not data_to_write:
        print(f"No data provided to write to sheet '{worksheet.title}'.", flush=True)
        return False
    try:
        worksheet.clear() # Clear existing content
        print(f"Cleared worksheet: '{worksheet.title}'", flush=True)

        if not isinstance(data_to_write, list) or not data_to_write or not isinstance(data_to_write[0], dict):
            print("Data to write must be a list of dictionaries.", flush=True)
            return False

        # Define the desired headers for the Google Sheet based on the image
        # New order: "Course", "Course Title", "Sect", "Day", "Room", "Time Slot", "Teacher", "Teacher Phone and Email"
        sheet_headers = ["Course", "Course Title", "Sect", "Day", "Room", "Time Slot", "Teacher", "Teacher Phone and Email"]
        
        all_rows_for_sheet = [sheet_headers] # Start with header row
        
        for item in data_to_write:
            teacher_phone = item.get("TeacherPhone", "")
            teacher_email = item.get("TeacherEmail", "")
            teacher_contact_combined = ""
            if teacher_phone and teacher_email:
                teacher_contact_combined = f"{teacher_phone}\n{teacher_email}"
            elif teacher_phone: # Only phone available
                teacher_contact_combined = teacher_phone
            elif teacher_email: # Only email available
                teacher_contact_combined = teacher_email
            
            # Map data from JSON item to the new header order
            row_values = [
                item.get("CourseCode", ""),     # Corresponds to "Course"
                item.get("CourseTitle", ""),    # Corresponds to "Course Title"
                item.get("Section", ""),        # Corresponds to "Sect"
                item.get("Day", ""),            # Corresponds to "Day"
                item.get("Room", ""),           # Corresponds to "Room"
                item.get("TimeSlot", ""),       # Corresponds to "Time Slot"
                item.get("Teacher", ""),        # Corresponds to "Teacher"
                teacher_contact_combined        # Corresponds to "Teacher Phone and Email"
            ]
            all_rows_for_sheet.append(row_values)
            
        # worksheet.update('A1', all_rows_for_sheet) # Write all data starting from A1
        worksheet.update(values=all_rows_for_sheet, range_name='A1')
        
        # Apply text wrapping to the "Teacher Phone and Email" column
        # This column is now the 8th column (index 7)
        contact_col_letter = gspread.utils.rowcol_to_a1(1, sheet_headers.index("Teacher Phone and Email") + 1)[0] # Get column letter like 'H'
        
        if contact_col_letter:
            # Format from row 2 (after header) to the end of data for this column
            worksheet.format(f"{contact_col_letter}2:{contact_col_letter}{len(all_rows_for_sheet)}", {'wrapStrategy': 'WRAP'})
            print(f"Applied text wrapping to '{sheet_headers[7]}' column ({contact_col_letter}).", flush=True)


        print(f"Successfully wrote {len(data_to_write)} data rows (plus header) to '{worksheet.title}'.", flush=True)
        return True
    except Exception as e:
        print(f"An error occurred while writing data to sheet '{worksheet.title}': {e}", flush=True)
        import traceback
        traceback.print_exc()
        return False

# --- New Function to Call Apps Script ---
def call_apps_script_function(script_id, function_name, client_secrets_file, token_pickle_file, scopes):
    """
    Authenticates and calls a specific Google Apps Script function.
    """
    creds = None
    if os.path.exists(token_pickle_file):
        with open(token_pickle_file, 'rb') as token:
            creds = pickle.load(token)
    
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            print("Refreshing Google API credentials...", flush=True)
            creds.refresh(Request())
        else:
            print(f"No valid Google API credentials found. Opening browser for authorization. "
                  f"Ensure '{client_secrets_file}' is in the same directory.", flush=True)
            flow = InstalledAppFlow.from_client_secrets_file(client_secrets_file, scopes)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(token_pickle_file, 'wb') as token:
            pickle.dump(creds, token)
        print("Google API credentials obtained and saved.", flush=True)

    try:
        service = build('script', 'v1', credentials=creds)
        print(f"Calling Apps Script function '{function_name}' (Script ID: {script_id})...", flush=True)
        
        request_body = {"function": function_name}
        
        response = service.scripts().run(scriptId=script_id, body=request_body).execute()
        
        if 'error' in response:
            error_details = response['error'].get('details', [])
            error_message = response['error'].get('errorMessage', 'Unknown Apps Script error')
            print(f"Apps Script Execution Error: {error_message}", flush=True)
            for detail in error_details:
                print(f"  - {detail}", flush=True)
            return False
        else:
            print(f"Apps Script function '{function_name}' executed successfully.", flush=True)
            return True

    except Exception as e:
        print(f"An error occurred while calling Apps Script API: {e}", flush=True)
        traceback.print_exc()
        return False


# --- Main Execution ---
if __name__ == "__main__":
    print("gsheet_formatter.py (simplified) execution started.", flush=True)
    
    # --- 1. Load routine data ---
    routine_data = load_routine_data(SCRAPED_DATA_JSON_PATH)
    if not routine_data:
        print("No routine data loaded. Exiting.", flush=True)
        exit()

    # --- 2. Authenticate and write data to Google Sheet ---
    gc = authenticate_gsheet(GOOGLE_SERVICE_ACCOUNT_KEY_FILE)
    if not gc:
        print("Google Sheets authentication failed. Exiting.", flush=True)
        exit()

    try:
        print(f"Attempting to open spreadsheet: '{SPREADSHEET_NAME}'", flush=True)
        spreadsheet = gc.open(SPREADSHEET_NAME)
        print(f"Successfully opened spreadsheet: '{spreadsheet.title}'", flush=True)

        num_cols = 8 # As per the new sheet_headers
        target_ws = get_or_create_worksheet(spreadsheet, TARGET_SHEET_NAME, rows=len(routine_data)+5, cols=num_cols+2) 
        
        if target_ws:
            success_writing = write_data_to_sheet(target_ws, routine_data)
            if success_writing:
                print(f"Data successfully written to sheet '{TARGET_SHEET_NAME}' in spreadsheet '{SPREADSHEET_NAME}'.", flush=True)
            else:
                print(f"Failed to write data to sheet '{TARGET_SHEET_NAME}'.", flush=True)
        else:
            print(f"Could not access or create target sheet '{TARGET_SHEET_NAME}'. Exiting.", flush=True)

    except gspread.exceptions.SpreadsheetNotFound:
        print(f"Error: Spreadsheet '{SPREADSHEET_NAME}' not found. "
              "Please ensure the name is correct and it has been shared with the service account email.", flush=True)
        exit() # Exit if spreadsheet not found
    except Exception as e:
        print(f"A critical error occurred during GSheet operations: {e}", flush=True)
        traceback.print_exc()
        exit() # Exit on critical error

    # --- 3. Call Apps Script Function (AFTER data is written) ---
    print("\nAttempting to call Apps Script function...", flush=True)
    if APP_SCRIPT_ID == 'YOUR_APP_SCRIPT_ID_GOES_HERE':
        print("WARNING: APP_SCRIPT_ID is not set. Please replace 'YOUR_APP_SCRIPT_ID_GOES_HERE' with your actual Script ID.", flush=True)
    else:
        apps_script_call_success = call_apps_script_function(
            script_id=APP_SCRIPT_ID,
            function_name="triggerSortFromPython", # This is the function you deployed as Executable API
            client_secrets_file=GOOGLE_OAUTH_CLIENT_SECRET_FILE,
            token_pickle_file=TOKEN_PICKLE_FILE,
            scopes=APP_SCRIPT_SCOPES
        )
        if apps_script_call_success:
            print("Apps Script trigger successful. Your sorted sheet and timestamp should be updated.", flush=True)
        else:
            print("Apps Script trigger failed. Check the error messages above.", flush=True)

    print("gsheet_formatter.py execution finished.", flush=True)